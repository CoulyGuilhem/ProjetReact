[{"C:\\Users\\Guilhem\\WebstormProjects\\demineur\\src\\index.js":"1","C:\\Users\\Guilhem\\WebstormProjects\\demineur\\src\\Timer.js":"2","C:\\Users\\Guilhem\\WebstormProjects\\demineur\\src\\FlagCounter.js":"3","C:\\Users\\Guilhem\\WebstormProjects\\demineur\\src\\Settings.js":"4","C:\\Users\\Guilhem\\WebstormProjects\\demineur\\src\\Game.js":"5"},{"size":1717,"mtime":1638563379800,"results":"6","hashOfConfig":"7"},{"size":1098,"mtime":1638563359915,"results":"8","hashOfConfig":"7"},{"size":288,"mtime":1638562715014,"results":"9","hashOfConfig":"7"},{"size":1527,"mtime":1638562715016,"results":"10","hashOfConfig":"7"},{"size":12914,"mtime":1638562715015,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wppcq0",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},"C:\\Users\\Guilhem\\WebstormProjects\\demineur\\src\\index.js",[],"C:\\Users\\Guilhem\\WebstormProjects\\demineur\\src\\Timer.js",[],"C:\\Users\\Guilhem\\WebstormProjects\\demineur\\src\\FlagCounter.js",[],["24","25"],"C:\\Users\\Guilhem\\WebstormProjects\\demineur\\src\\Settings.js",[],"C:\\Users\\Guilhem\\WebstormProjects\\demineur\\src\\Game.js",["26"],"import React from 'react';\r\nimport './index.css';\r\n\r\n/**\r\n * Square() permet de generer un bouton qui correspond √† une case\r\n * @param props\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\n\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className={props.className} onClick={props.onClick} onContextMenu={props.rightClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\n/**\r\n *  Cette classe gere l'affichage de la grille\r\n */\r\n\r\nclass Board extends React.Component {\r\n\r\n    /**\r\n     *  renderSquare permet de preparer les donn√©es  passer en argument pour la realisation d'un carr√©\r\n     *  Soit : son style sa valeur et les fonctions appel√©es sur le click gauche et droit\r\n     */\r\n\r\n\r\n    renderSquare(i) {\r\n        let rows = this.props.rows\r\n        let className\r\n        let value = this.props.squares[i]\r\n        if(value === 0){\r\n            value = null\r\n            className =\"squareNull\"\r\n        } else if (value === null){\r\n            if((rows%2 === 0)) {\r\n                if (Math.floor(i/rows) % 2 === 0) {\r\n                    if (i % 2 === 0) {\r\n                        className = \"squareNotDiscovered2\"\r\n                    } else {\r\n                        className = \"squareNotDiscovered\"\r\n                    }\r\n                } else {\r\n                    if (i % 2 !== 0) {\r\n                        className = \"squareNotDiscovered2\"\r\n                    } else {\r\n                        className = \"squareNotDiscovered\"\r\n                    }\r\n                }\r\n            } else {\r\n                if (i % 2 === 0) {\r\n                    className = \"squareNotDiscovered2\"\r\n                } else {\r\n                    className = \"squareNotDiscovered\"\r\n                }\r\n            }\r\n\r\n        } else if (value === 9){\r\n            value=\"üí£\"\r\n            className = \"squareMine\"\r\n        } else if (value === \"P\") {\r\n            value = \"‚öë\"\r\n            className=\"squareFlag\"\r\n        } else {\r\n            className=\"squareNearMine\"\r\n        }\r\n        return (\r\n            <Square key={i}\r\n                className = {className}\r\n                value={value}\r\n                onClick={() => this.props.onClick(i)}\r\n                rightClick={() => this.props.onContextMenu(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    /**\r\n     * renderRows permet de generer les colonnes de notre table\r\n     * coordonne est l'id de la ligne de chaque carr√© gener√©\r\n     *\r\n     * i + coordonne*10 correspond donc √† l'id de chaque carr√©\r\n     * (exemple i = 7 , coordonne = 2 (il s'agit d'une grille 10 * 10))\r\n     * la case a la collone 8 et √† la ligne 2 = 27\r\n     *  la premiere case = 0\r\n     *\r\n     * @param coordonne\r\n     * @returns {JSX.Element}\r\n     */\r\n\r\n    renderRows(coordonne){\r\n        let rowsLength = this.props.rows\r\n        const rows = [];\r\n        for (let i = 0; i < rowsLength; i++){\r\n            rows.push(this.renderSquare(i+coordonne*rowsLength))\r\n        }\r\n        return (\r\n            <div className=\"board_line\" key={\"lien : \"+coordonne}>\r\n                {rows}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /**\r\n     * render permet de gerer l'affichage de notre grille\r\n     * @returns {JSX.Element}\r\n     */\r\n\r\n    render() {\r\n        let linesLength = this.props.lines // Nombre de ligne voulu\r\n        const lines = [];\r\n        for (let i = 0; i < linesLength; i++){\r\n            lines[i]=this.renderRows(i)\r\n        }\r\n        return (\r\n            <div className=\"board\" key={\"Board\"}>\r\n                {lines}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nclass Game extends React.Component {\r\n\r\n\r\n    /**\r\n     * Il s'agit du constructeur li√©  la gestion du jeu\r\n     *\r\n     * gameTable contient les valeurs √† afficher sur la grille\r\n     * tableMine contient la grille gener√©e avec les mines\r\n     * gameState contient le texte qui correspond  l'etat du jeu (gagn√© ou perdu)\r\n     *\r\n     * @param props\r\n     */\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const lines = this.props.lines\r\n        const rows = this.props.rows\r\n        const minePercentage = this.props.mines\r\n\r\n        this.tableMine = this.generateMines(lines,rows,minePercentage)\r\n        this.round = 0\r\n        this.state = {\r\n            gameTable: Array(lines * rows).fill(null),\r\n            gameState: \"\",\r\n            flagMax: Math.floor((lines * rows * minePercentage)/100)\r\n        }\r\n        this.props.flags(this.state.flagMax)\r\n    }\r\n\r\n    /**\r\n     * generateMine() permet de generer aleatoirement les mines\r\n     * elle sont stock√©es dans tableMine :\r\n     * elle fait appel √† la fonction generateWarning avant de renvoyer la grille de jeu finale\r\n     *\r\n     * @param line\r\n     * @param row\r\n     * @param minePercentage\r\n     * @returns {any[]}\r\n     */\r\n\r\n    generateMines(line,row,minePercentage){\r\n        let tableMine = Array(line)\r\n        let lineRow\r\n        let mine = Math.floor((line * row * minePercentage)/100)\r\n        for(let i = 0;i<line;i++){\r\n            lineRow = []\r\n            for(let j = 0;j<row;j++){\r\n\r\n                lineRow[j] = 0\r\n            }\r\n            tableMine[i] = lineRow\r\n        }\r\n        let randomLine\r\n        let randomRow\r\n        for (let i = 0 ; i < mine ; i++){\r\n            do {\r\n                randomLine = Math.round(Math.random() * (line-1))\r\n                randomRow = Math.round(Math.random() * (row-1))\r\n            } while(tableMine[randomLine][randomRow] === 9)\r\n            tableMine[randomLine][randomRow] = 9;\r\n        }\r\n        tableMine = this.generateWarning(tableMine,line,row)\r\n        return tableMine\r\n    }\r\n\r\n    /**\r\n     * generateWaring() recupere la grille de jeu avec les mines gener√©es.\r\n     * elle rajoute +1 dans toutes les cases adjacentes.\r\n     * elle renvoie la grille de jeu finale\r\n     *\r\n     * @param tableMine\r\n     * @param line\r\n     * @param row\r\n     * @returns {*}\r\n     */\r\n\r\n    generateWarning(tableMine,line,row){\r\n        for(let i = 0 ; i < line ; i++){\r\n            for(let j = 0; j < row ; j++){\r\n                if(tableMine[i][j] >= 9){\r\n\r\n                    // Gestion 3 cases haut\r\n                    if(i !== 0){\r\n                        tableMine[i-1][j] = tableMine[i-1][j] +1\r\n                        if(j !== 0){\r\n                            tableMine[i-1][j-1] = tableMine[i-1][j-1] +1\r\n                        }\r\n                        if(j !== row-1){\r\n                            tableMine[i-1][j+1] = tableMine[i-1][j+1] +1\r\n                        }\r\n                    }\r\n\r\n                    //Gestion 3 Cases bas\r\n\r\n                    if(i !== line-1){\r\n                        tableMine[i+1][j] = tableMine[i+1][j] +1\r\n                        if(j !== 0){\r\n                            tableMine[i+1][j-1] = tableMine[i+1][j-1] +1\r\n                        }\r\n                        if(j !== row-1){\r\n                            tableMine[i+1][j+1] = tableMine[i+1][j+1] +1\r\n                        }\r\n                    }\r\n\r\n                    // gestion case gauche\r\n\r\n                    if(j !== 0){\r\n                        tableMine[i][j-1] = tableMine[i][j-1] +1\r\n                    }\r\n                    if (j !== row-1){\r\n                        tableMine[i][j+1] = tableMine[i][j+1] +1\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for(let i = 0; i < line ; i++){\r\n            for(let j = 0; j < row ; j++) {\r\n                if (tableMine[i][j] >= 9) {\r\n                    tableMine[i][j] = 9;\r\n                }\r\n            }\r\n        }\r\n        return tableMine\r\n    }\r\n\r\n    /**\r\n     * updateZone() est appel√©e lorsqu'on clique gauche sur une case vide\r\n     * elle d√©voille toutes les cases adjacente et fait appel √† elle meme de maniere recursive pour chaque case adjacente valant 0 (soit vide)\r\n     *\r\n     * @param gameTable\r\n     * @param line\r\n     * @param row\r\n     * @param tableMine\r\n     * @returns {*}\r\n     */\r\n\r\n    updateZone(gameTable,line,row,tableMine){\r\n\r\n        let id = line * this.props.rows + row\r\n        if (line < 0 || line > tableMine.length-1) return gameTable;\r\n        if (row <0 || row > tableMine[line].length-1) return gameTable;\r\n        if(gameTable[id] !== null) return gameTable;\r\n        gameTable[id] = tableMine[line][row]\r\n        if(gameTable[id]!==0) return gameTable;\r\n        gameTable = this.updateZone(gameTable,line+1,row,tableMine)\r\n        gameTable = this.updateZone(gameTable,line-1,row,tableMine)\r\n        gameTable = this.updateZone(gameTable,line,row+1,tableMine)\r\n        gameTable = this.updateZone(gameTable,line,row-1,tableMine)\r\n        gameTable = this.updateZone(gameTable,line+1,row-1,tableMine)\r\n        gameTable = this.updateZone(gameTable,line+1,row+1,tableMine)\r\n        gameTable = this.updateZone(gameTable,line-1,row+1,tableMine)\r\n        gameTable = this.updateZone(gameTable,line-1,row-1,tableMine)\r\n        return gameTable;\r\n    }\r\n\r\n    /**\r\n     * gameStatus() verifie si seul les cases non affich√©es / drapeau valent 9\r\n     * si oui on renvoie vrai\r\n     * si non on renvoie faux\r\n     * @param line\r\n     * @param row\r\n     * @returns {boolean}\r\n     */\r\n\r\n    gameStatus(line,row){\r\n        const gameTable = this.state.gameTable.slice();\r\n        const tableMine = this.tableMine.slice();\r\n        let id\r\n        for(let i = 0; i < line ; i++){\r\n            for(let j = 0; j < row ; j++) {\r\n                id = i * row + j\r\n                if((gameTable[id] === null || gameTable[id] ===\"P\") && tableMine[i][j] !== 9) {\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    /**\r\n     * rightClick() permet d'afficher un drapeau sur la case i\r\n     * on ne peut pas clicker sur un drapeau\r\n     * pour l'enlever on doit faire un click dorit dessus\r\n     * @param i\r\n     */\r\n\r\n    rightClick(i){\r\n        const gameTable = this.state.gameTable.slice();\r\n        let flags\r\n        if(gameTable[i] === null && this.state.flagMax > 0){\r\n            gameTable[i] = \"P\"\r\n            this.setState({\r\n                gameTable:gameTable,\r\n                flagMax: this.state.flagMax - 1\r\n            },this.setPropsFlag)\r\n\r\n        } else if (gameTable[i] === \"P\"){\r\n            gameTable[i] = null\r\n            this.setState({\r\n                gameTable:gameTable,\r\n                flagMax: this.state.flagMax + 1\r\n            },this.setPropsFlag)\r\n        }\r\n        this.setPropsFlag()\r\n\r\n    }\r\n    setPropsFlag(){\r\n        this.props.flags(this.state.flagMax)\r\n    }\r\n\r\n    /**\r\n     * handleClick permet de devoiler la case cliqu√©e\r\n     * si elle vaut 0 on fait appel √† la fonction updateZone pour devoiller la zone vide\r\n     * si une mine est devoill√©e on met fin √† la partie\r\n     * √† chaque click on verifie si l'ensemble des cases non min√©es sont d√©voill√©es\r\n     * @param i\r\n     */\r\n\r\n    handleClick(i) {\r\n        const rows = this.props.rows\r\n        const lines = this.props.lines\r\n        const gameTable = this.state.gameTable.slice();\r\n        const line = Math.floor(i / rows)\r\n        const row = i % rows\r\n        /**\r\n        if(this.round === 0){\r\n            this.tableMine = this.generateMines(lines,rows,this.props.mines)\r\n            this.round = this.round +1\r\n        }*/\r\n        const tableMine = this.tableMine.slice();\r\n\r\n\r\n        if (this.state.gameState === \"\") {\r\n\r\n            if (tableMine[line][row] === 0) {\r\n                this.setState({\r\n                    gameTable: this.updateZone(gameTable,line, row,tableMine),\r\n                })\r\n\r\n            } else if(gameTable[i] !== \"P\"){\r\n                gameTable[i] = tableMine[line][row]\r\n                this.setState({\r\n                    gameTable: gameTable,\r\n                })\r\n            }\r\n\r\n            if(this.gameStatus(lines,rows)){\r\n                this.setState({\r\n                    gameState: \"GG\",\r\n                });\r\n            }\r\n\r\n            if(gameTable[i] === 9){\r\n                this.setState({\r\n                    gameState: \"BOOM\",\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * permet de generer une table\r\n     * @returns {JSX.Element}\r\n     */\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game\" key=\"GAME\" onContextMenu={(e)=> e.preventDefault()}>\r\n                <div className=\"game-board\" key={\"Game Board\"}>\r\n                    <Board\r\n                        lines = {this.props.lines}\r\n                        rows = {this.props.rows}\r\n                        squares = {this.state.gameTable}\r\n                        onClick = {i => this.handleClick(i)}\r\n                        onContextMenu = {i=> this.rightClick(i)}\r\n                    />\r\n                </div>\r\n                <p className=\"gameState\">{this.state.gameState}</p>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n// ========================================\r\nexport default Game;\r\n\r\n\r\n\r\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":317,"column":13,"nodeType":"33","messageId":"34","endLine":317,"endColumn":18},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'flags' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]